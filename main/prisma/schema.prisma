// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
    @@index([createdById])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    centsBalance Float @default(500)

    stripeCustomerId      String?
    stripePaymentMethodId String?

    apiKey String?

    hfToken String?

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    accounts    Account[]
    sessions    Session[]
    posts       Post[]
    Model       Model[]
    Transaction Transaction[]
    ChatRequest ChatRequest[]
    Dataset     Dataset[]
}

model Model {
    id          String @id @default(cuid())
    userId      String
    name        String
    costInCents Int

    state String @default("training") // "training" | "finished" | "error"

    datasetPath  String? // TODO: Delete
    learningRate String  @default("Medium") // "Low" | "Medium" | "High"
    epochs       Int
    baseModel    String

    wandbUrl String?

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    datasetId String? // TODO: Make required
    dataset   Dataset? @relation(fields: [datasetId], references: [id]) // TODO: make required

    user User @relation(fields: [userId], references: [id])

    @@index([name])
    @@index([userId])
    @@index([datasetId])
}

model Dataset {
    id       String @id @default(cuid())
    userId   String
    name     String
    fileName String

    rows      Int
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    user  User    @relation(fields: [userId], references: [id])
    Model Model[]

    @@index([name])
    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Transaction {
    id        String   @id @default(cuid())
    userId    String
    amount    Float
    createdAt DateTime @default(now())

    reason String

    user User @relation(fields: [userId], references: [id])

    @@index([userId])
}

model ChatRequest {
    id String @id @default(cuid())

    userId  String
    modelId String

    createdAt DateTime @default(now())

    user User @relation(fields: [userId], references: [id])

    @@index([userId])
    @@index([createdAt])
}
